{"ast":null,"code":"var _jsxFileName = \"/Users/rachelwallace/Documents/Harvard-Courses/Developing Single-Page Web Applications/finalProject-weatherApp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationForm from './LocationForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport WeatherForecast from './WeatherForecast';\nimport Nav from './Nav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Routes, Switch } from \"react-router-dom\";\nimport PopularDisplay from \"./PopularDisplay\";\nimport popularLocations from './popularLocations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [localTime, setLocalTime] = useState('');\n  const [popularWeatherData, setPopularWeatherData] = useState([]);\n  const corsAnywhereUrl = 'https://cors-anywhere.herokuapp.com/';\n  const getWeatherByZipCode = async zipCode => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`);\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      getWeatherByCoordinates(lat, lng);\n      getForecastByCoordinates(lat, lng);\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n    }\n  };\n  const getCoordinatesByZipCode = async zipCode => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`);\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      return {\n        lat,\n        lng\n      };\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n      throw error;\n    }\n  };\n  const getWeatherByCoordinates = async (lat, lng) => {\n    console.log(\"getWeatherByCoordinates\");\n    console.log(lat, lng);\n    try {\n      const response = await axios.get(`http://api.weatherapi.com/v1/current.json?key=2a1769a877554f7e88133029231105&q=${lat},${lng}`);\n      console.log(response);\n      const weather = {\n        temperature: response.data.current.temp_f,\n        description: response.data.current.condition.text,\n        humidity: response.data.current.humidity,\n        windSpeed: response.data.current.wind_mph\n      };\n      setWeatherData(weather);\n    } catch (error) {\n      console.error('Error getting weather:', error);\n    }\n  };\n  const getForecastByCoordinates = async (lat, lng) => {\n    try {\n      const response = await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=2a1769a877554f7e88133029231105&q=${lat},${lng}&days=3`);\n      const forecast = response.data.forecast.forecastday.map(item => ({\n        dateTime: item.date,\n        temperature: item.day.avgtemp_f,\n        description: item.day.condition.text,\n        humidity: item.day.avghumidity,\n        windSpeed: item.day.maxwind_mph\n      }));\n      setForecastData(forecast);\n    } catch (error) {\n      console.error('Error getting forecast:', error);\n    }\n  };\n  const fetchPopularWeatherData = async () => {\n    const zipCodes = ['90210', '10001', '60601']; // Array of zip codes\n\n    const weatherDataPromises = zipCodes.map(async zipCode => {\n      try {\n        const coordinates = await getCoordinatesByZipCode(zipCode);\n        const weather = await getWeatherByCoordinates(coordinates.lat, coordinates.lng);\n        return {\n          zipCode,\n          weather\n        };\n      } catch (error) {\n        console.error(`Error fetching weather data for ${zipCode}:`, error);\n        return {\n          zipCode,\n          weather: null\n        };\n      }\n    });\n    const weatherData = await Promise.all(weatherDataPromises);\n    setPopularWeatherData(weatherData);\n  };\n\n  // useEffect(() => {\n  //     const updateLocalTime = () => {\n  //         const currentTime = new Date();\n  //         const options = {\n  //             hour: 'numeric',\n  //             minute: 'numeric',\n  //             second: 'numeric',\n  //             timeZoneName: 'short',\n  //         };\n  //         const localTimeString = currentTime.toLocaleString('en-US', options);\n  //         setLocalTime(localTimeString);\n  //     };\n  //\n  //     const timer = setInterval(updateLocalTime, 1000);\n  //     return () => {\n  //         clearInterval(timer);\n  //     };\n  // }, []);\n\n  useEffect(() => {\n    const fetchPopularWeatherData = async () => {\n      const zipCodes = popularLocations.map(location => location.zipcode);\n      const weatherDataPromises = zipCodes.map(async zipCode => {\n        try {\n          const coordinates = await getCoordinatesByZipCode(zipCode);\n          const weather = await getWeatherByCoordinates(coordinates.lat, coordinates.lng);\n          return {\n            zipCode,\n            weather\n          };\n        } catch (error) {\n          console.error(`Error fetching weather data for ${zipCode}:`, error);\n          return {\n            zipCode,\n            weather: null\n          };\n        }\n      });\n      const weatherData = await Promise.all(weatherDataPromises);\n      setPopularWeatherData(weatherData);\n    };\n    fetchPopularWeatherData();\n  }, []);\n  useEffect(() => {\n    fetchPopularWeatherData();\n    return () => {};\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"React Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Local Time: \", localTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(LocationForm, {\n              onFormSubmit: getWeatherByZipCode\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n              weather: weatherData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 49\n            }, this), forecastData && /*#__PURE__*/_jsxDEV(WeatherForecast, {\n              forecast: forecastData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/popular\",\n          element: /*#__PURE__*/_jsxDEV(PopularDisplay, {\n            weatherData: popularWeatherData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this)\n  // <div>\n  //     <h1>React Weather App</h1>\n  //     <p>Local Time: {localTime}</p>\n  //     <LocationForm onFormSubmit={getCoordinatesByZipCode} />\n  //     {weatherData && <WeatherDisplay weather={weatherData} />}\n  //     {forecastData && <WeatherForecast forecast={forecastData} />}\n  // </div>\n  ;\n};\n_s(WeatherApp, \"3OiU9AFu6YZSGc6T1H+53mnbVZ4=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","LocationForm","WeatherDisplay","WeatherForecast","Nav","BrowserRouter","Router","Route","Routes","Switch","PopularDisplay","popularLocations","jsxDEV","_jsxDEV","WeatherApp","_s","weatherData","setWeatherData","forecastData","setForecastData","localTime","setLocalTime","popularWeatherData","setPopularWeatherData","corsAnywhereUrl","getWeatherByZipCode","zipCode","response","get","lat","lng","data","results","geometry","location","getWeatherByCoordinates","getForecastByCoordinates","error","console","getCoordinatesByZipCode","log","weather","temperature","current","temp_f","description","condition","text","humidity","windSpeed","wind_mph","forecast","forecastday","map","item","dateTime","date","day","avgtemp_f","avghumidity","maxwind_mph","fetchPopularWeatherData","zipCodes","weatherDataPromises","coordinates","Promise","all","zipcode","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onFormSubmit","_c","$RefreshReg$"],"sources":["/Users/rachelwallace/Documents/Harvard-Courses/Developing Single-Page Web Applications/finalProject-weatherApp/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationForm from './LocationForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport WeatherForecast from './WeatherForecast';\nimport Nav from './Nav';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router, Route, Routes, Switch} from \"react-router-dom\";\nimport PopularDisplay from \"./PopularDisplay\";\nimport popularLocations from './popularLocations';\n\nconst WeatherApp = () => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [forecastData, setForecastData] = useState(null);\n    const [localTime, setLocalTime] = useState('');\n    const [popularWeatherData, setPopularWeatherData] = useState([]);\n    const corsAnywhereUrl = 'https://cors-anywhere.herokuapp.com/';\n\n    const getWeatherByZipCode = async (zipCode) => {\n        try {\n            const response = await axios.get(\n                `https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`\n            );\n            const { lat, lng } = response.data.results[0].geometry.location;\n            getWeatherByCoordinates(lat, lng);\n            getForecastByCoordinates(lat, lng);\n        } catch (error) {\n            console.error('Error getting coordinates:', error);\n        }\n    };\n\n    const getCoordinatesByZipCode = async (zipCode) => {\n        try {\n            const response = await axios.get(\n                `https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`\n            );\n            const { lat, lng } = response.data.results[0].geometry.location;\n            return { lat, lng };\n        } catch (error) {\n            console.error('Error getting coordinates:', error);\n            throw error;\n        }\n    };\n\n    const getWeatherByCoordinates = async (lat, lng) => {\n        console.log(\"getWeatherByCoordinates\")\n        console.log(lat, lng)\n        try {\n            const response = await axios.get(\n                `http://api.weatherapi.com/v1/current.json?key=2a1769a877554f7e88133029231105&q=${lat},${lng}`\n            );\n            console.log(response)\n            const weather = {\n                temperature: response.data.current.temp_f,\n                description: response.data.current.condition.text,\n                humidity: response.data.current.humidity,\n                windSpeed: response.data.current.wind_mph,\n            };\n            setWeatherData(weather);\n        } catch (error) {\n            console.error('Error getting weather:', error);\n        }\n    };\n\n    const getForecastByCoordinates = async (lat, lng) => {\n        try {\n            const response = await axios.get(\n                `http://api.weatherapi.com/v1/forecast.json?key=2a1769a877554f7e88133029231105&q=${lat},${lng}&days=3`\n            );\n            const forecast = response.data.forecast.forecastday.map((item) => ({\n                dateTime: item.date,\n                temperature: item.day.avgtemp_f,\n                description: item.day.condition.text,\n                humidity: item.day.avghumidity,\n                windSpeed: item.day.maxwind_mph,\n            }));\n            setForecastData(forecast);\n        } catch (error) {\n            console.error('Error getting forecast:', error);\n        }\n    };\n\n    const fetchPopularWeatherData = async () => {\n        const zipCodes = ['90210', '10001', '60601']; // Array of zip codes\n\n        const weatherDataPromises = zipCodes.map(async (zipCode) => {\n            try {\n                const coordinates = await getCoordinatesByZipCode(zipCode);\n                const weather = await getWeatherByCoordinates(coordinates.lat, coordinates.lng);\n                return { zipCode, weather };\n            } catch (error) {\n                console.error(`Error fetching weather data for ${zipCode}:`, error);\n                return { zipCode, weather: null };\n            }\n        });\n\n        const weatherData = await Promise.all(weatherDataPromises);\n        setPopularWeatherData(weatherData);\n    };\n\n    // useEffect(() => {\n    //     const updateLocalTime = () => {\n    //         const currentTime = new Date();\n    //         const options = {\n    //             hour: 'numeric',\n    //             minute: 'numeric',\n    //             second: 'numeric',\n    //             timeZoneName: 'short',\n    //         };\n    //         const localTimeString = currentTime.toLocaleString('en-US', options);\n    //         setLocalTime(localTimeString);\n    //     };\n    //\n    //     const timer = setInterval(updateLocalTime, 1000);\n    //     return () => {\n    //         clearInterval(timer);\n    //     };\n    // }, []);\n\n    useEffect(() => {\n        const fetchPopularWeatherData = async () => {\n            const zipCodes = popularLocations.map((location) => location.zipcode);\n\n            const weatherDataPromises = zipCodes.map(async (zipCode) => {\n                try {\n                    const coordinates = await getCoordinatesByZipCode(zipCode);\n                    const weather = await getWeatherByCoordinates(coordinates.lat, coordinates.lng);\n                    return { zipCode, weather };\n                } catch (error) {\n                    console.error(`Error fetching weather data for ${zipCode}:`, error);\n                    return { zipCode, weather: null };\n                }\n            });\n\n            const weatherData = await Promise.all(weatherDataPromises);\n            setPopularWeatherData(weatherData);\n        };\n\n        fetchPopularWeatherData();\n    }, []);\n\n\n    useEffect(() => {\n        fetchPopularWeatherData();\n        return () => {\n        };\n    }, []);\n\n    return (\n        <Router>\n            <div>\n                <h1>React Weather App</h1>\n                <p>Local Time: {localTime}</p>\n                <Nav />\n                <Routes>\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <LocationForm onFormSubmit={getWeatherByZipCode} />\n                                {weatherData && <WeatherDisplay weather={weatherData} />}\n                                {forecastData && <WeatherForecast forecast={forecastData} />}\n                            </div>\n                        }\n                    />\n                    <Route\n                        path=\"/popular\"\n                        element={<PopularDisplay weatherData={popularWeatherData} />}\n                    />\n                </Routes>\n            </div>\n        </Router>\n        // <div>\n        //     <h1>React Weather App</h1>\n        //     <p>Local Time: {localTime}</p>\n        //     <LocationForm onFormSubmit={getCoordinatesByZipCode} />\n        //     {weatherData && <WeatherDisplay weather={weatherData} />}\n        //     {forecastData && <WeatherForecast forecast={forecastData} />}\n        // </div>\n    );\n};\n\nexport default WeatherApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}