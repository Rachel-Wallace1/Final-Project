{"ast":null,"code":"var _jsxFileName = \"/Users/rachelwallace/Documents/Harvard-Courses/Developing Single-Page Web Applications/finalProject-weatherApp/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationForm from './LocationForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport WeatherForecast from './WeatherForecast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherApp = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [localTime, setLocalTime] = useState('');\n  const getCoordinatesByZipCode = async zipCode => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`);\n      console.log(response);\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      getWeatherByCoordinates(lat, lng);\n      getForecastByCoordinates(lat, lng);\n    } catch (error) {\n      console.error('Error getting coordinates:', error);\n    }\n  };\n  const getWeatherByCoordinates = async (lat, lng) => {\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=imperial&appid=ac8cfff2ad4aa781c5ae31f5bc7a2d07`);\n      const weather = {\n        temperature: response.data.main.temp,\n        description: response.data.weather[0].description,\n        humidity: response.data.main.humidity,\n        windSpeed: response.data.wind.speed\n      };\n      setWeatherData(weather);\n    } catch (error) {\n      console.error('Error getting weather:', error);\n    }\n  };\n  const getForecastByCoordinates = async (lat, lng) => {\n    try {\n      const response = await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=2a1769a877554f7e88133029231105&q=48.8567,2.3508&days=3'`);\n      console.log(response.data.forecast.forecastday);\n      const forecast = response.data.forecast.forecastday.map(item => ({\n        dateTime: item.date,\n        temperature: item.day.avgtemp_f\n      }));\n      console.log(forecast);\n    } catch (error) {\n      console.error('Error getting forecast:', error);\n    }\n    try {\n      const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lng}&cnt=14&units=imperial&appid=ac8cfff2ad4aa781c5ae31f5bc7a2d07`);\n      const forecast = response.data.list.map(item => ({\n        dateTime: item.dt_txt,\n        temperature: item.main.temp,\n        description: item.weather[0].description,\n        humidity: item.main.humidity,\n        windSpeed: item.wind.speed\n      }));\n      setForecastData(forecast);\n    } catch (error) {\n      console.error('Error getting forecast:', error);\n    }\n  };\n  useEffect(() => {\n    const updateLocalTime = () => {\n      const currentTime = new Date();\n      const options = {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      };\n      const localTimeString = currentTime.toLocaleString('en-US', options);\n      setLocalTime(localTimeString);\n    };\n    const timer = setInterval(updateLocalTime, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Local Time: \", localTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LocationForm, {\n      onFormSubmit: getCoordinatesByZipCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n      weather: weatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }, this), forecastData && /*#__PURE__*/_jsxDEV(WeatherForecast, {\n      forecast: forecastData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(WeatherApp, \"zBfKNQ19+YSLg0qwZ3H1xYEL9TY=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","LocationForm","WeatherDisplay","WeatherForecast","jsxDEV","_jsxDEV","WeatherApp","_s","weatherData","setWeatherData","forecastData","setForecastData","localTime","setLocalTime","getCoordinatesByZipCode","zipCode","response","get","console","log","lat","lng","data","results","geometry","location","getWeatherByCoordinates","getForecastByCoordinates","error","weather","temperature","main","temp","description","humidity","windSpeed","wind","speed","forecast","forecastday","map","item","dateTime","date","day","avgtemp_f","list","dt_txt","updateLocalTime","currentTime","Date","options","hour","minute","second","timeZoneName","localTimeString","toLocaleString","timer","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","onFormSubmit","_c","$RefreshReg$"],"sources":["/Users/rachelwallace/Documents/Harvard-Courses/Developing Single-Page Web Applications/finalProject-weatherApp/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LocationForm from './LocationForm';\nimport WeatherDisplay from './WeatherDisplay';\nimport WeatherForecast from './WeatherForecast';\n\nconst WeatherApp = () => {\n    const [weatherData, setWeatherData] = useState(null);\n    const [forecastData, setForecastData] = useState(null);\n    const [localTime, setLocalTime] = useState('');\n\n    const getCoordinatesByZipCode = async (zipCode) => {\n        try {\n            const response = await axios.get(\n                `https://maps.googleapis.com/maps/api/geocode/json?address=${zipCode}&key=AIzaSyBiFa6AYtxVXmpHKNLLCyy1w97Li0mlCDM`\n            );\n            console.log(response)\n            const { lat, lng } = response.data.results[0].geometry.location;\n            getWeatherByCoordinates(lat, lng);\n            getForecastByCoordinates(lat, lng);\n        } catch (error) {\n            console.error('Error getting coordinates:', error);\n        }\n    };\n\n    const getWeatherByCoordinates = async (lat, lng) => {\n        try {\n            const response = await axios.get(\n                `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=imperial&appid=ac8cfff2ad4aa781c5ae31f5bc7a2d07`\n            );\n            const weather = {\n                temperature: response.data.main.temp,\n                description: response.data.weather[0].description,\n                humidity: response.data.main.humidity,\n                windSpeed: response.data.wind.speed,\n            };\n            setWeatherData(weather);\n        } catch (error) {\n            console.error('Error getting weather:', error);\n        }\n    };\n\n    const getForecastByCoordinates = async (lat, lng) => {\n        try {\n            const response = await axios.get(\n                `http://api.weatherapi.com/v1/forecast.json?key=2a1769a877554f7e88133029231105&q=48.8567,2.3508&days=3'`\n            );\n            console.log(response.data.forecast.forecastday)\n            const forecast = response.data.forecast.forecastday.map((item) => ({\n                dateTime: item.date,\n                temperature: item.day.avgtemp_f,\n            }));\n            console.log(forecast)\n        } catch (error) {\n            console.error('Error getting forecast:', error);\n        }\n\n        try {\n            const response = await axios.get(\n                `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lng}&cnt=14&units=imperial&appid=ac8cfff2ad4aa781c5ae31f5bc7a2d07`\n            );\n            const forecast = response.data.list.map((item) => ({\n                dateTime: item.dt_txt,\n                temperature: item.main.temp,\n                description: item.weather[0].description,\n                humidity: item.main.humidity,\n                windSpeed: item.wind.speed,\n            }));\n            setForecastData(forecast);\n        } catch (error) {\n            console.error('Error getting forecast:', error);\n        }\n    };\n\n    useEffect(() => {\n        const updateLocalTime = () => {\n            const currentTime = new Date();\n            const options = {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            };\n            const localTimeString = currentTime.toLocaleString('en-US', options);\n            setLocalTime(localTimeString);\n        };\n\n        const timer = setInterval(updateLocalTime, 1000);\n        return () => {\n            clearInterval(timer);\n        };\n    }, []);\n\n    return (\n        <div>\n            <h1>React Weather App</h1>\n            <p>Local Time: {localTime}</p>\n            <LocationForm onFormSubmit={getCoordinatesByZipCode} />\n            {weatherData && <WeatherDisplay weather={weatherData} />}\n            {forecastData && <WeatherForecast forecast={forecastData} />}\n        </div>\n    );\n};\n\nexport default WeatherApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}